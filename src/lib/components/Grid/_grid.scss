// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
@use 'sass:math';

@if $enable-grid-classes {
  .container {
    @include make-container();
    @include make-container-max-widths();
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if $enable-grid-classes {
  .container-fluid {
    @include make-container();
  }
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
  .row {
    @include make-row();
  }

  // add custom gutters for all breakpoints
  @media (min-width: map-get($grid-breakpoints, xs)) and (max-width: map-get($grid-breakpoints, sm)) {
    .row > .col,
    .row > [class*='col-'] {
      padding-right: math.div($grid-gutter-width-xs, 2);
      padding-left: math.div($grid-gutter-width-xs, 2);
    }
  }
  @media (min-width: map-get($grid-breakpoints, sm)) and (max-width: map-get($grid-breakpoints, md)) {
    .row > .col,
    .row > [class*='col-'] {
      padding-right: math.div($grid-gutter-width-sm, 2);
      padding-left: math.div($grid-gutter-width-sm, 2);
    }
  }
  @media (min-width: map-get($grid-breakpoints, md)) and (max-width: map-get($grid-breakpoints, lg)) {
    .row > .col,
    .row > [class*='col-'] {
      padding-right: math.div($grid-gutter-width-md, 2);
      padding-left: math.div($grid-gutter-width-md, 2);
    }
  }
  @media (min-width: map-get($grid-breakpoints, lg)) and (max-width: map-get($grid-breakpoints, xl)) {
    .row > .col,
    .row > [class*='col-'] {
      padding-right: math.div($grid-gutter-width-lg, 2);
      padding-left: math.div($grid-gutter-width-lg, 2);
    }
  }
  @media (min-width: map-get($grid-breakpoints, xl)) {
    .row > .col,
    .row > [class*='col-'] {
      padding-right: math.div($grid-gutter-width-xl, 2);
      padding-left: math.div($grid-gutter-width-xl, 2);
    }
  }

  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  .no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*='col-'] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @media (min-width: map-get($grid-breakpoints, xs)) and (max-width: map-get($grid-breakpoints, sm)) {
    @include make-grid-columns-xs();
  }
  @media (min-width: map-get($grid-breakpoints, sm)) and (max-width: map-get($grid-breakpoints, md)) {
    @include make-grid-columns-sm();
  }
  @media (min-width: map-get($grid-breakpoints, md)) and (max-width: map-get($grid-breakpoints, lg)) {
    @include make-grid-columns-md();
  }
  @media (min-width: map-get($grid-breakpoints, lg)) and (max-width: map-get($grid-breakpoints, xl)) {
    @include make-grid-columns-lg();
  }
  @media (min-width: map-get($grid-breakpoints, xl)) {
    @include make-grid-columns-xl();
  }
}
